# In Emacs org-mode: before exporting, comment this out START
;; Local Variables:
;; ispell-check-comments: exclusive
;; ispell-local-dictionary: "english"
;; End:
# In Emacs org-mode: before exporting, comment this out FINISH

# Org-mode Export LaTeX Customization Notes:
# - Interpret 'bla_bla' as LaTeX Math bla subscript bla: #+OPTIONS ^:t. Interpret literally bla_bla: ^:nil.
# - org export: turn off heading -> section numbering: #+OPTIONS: num:nil
# - org export: change list numbering to alphabetical, sources:
#   - https://orgmode.org/manual/Plain-lists-in-LaTeX-export.html
#   - https://tex.stackexchange.com/a/129960
#   - must be inserted before each list:
#     #+ATTR_LATEX: :environment enumerate
#     #+ATTR_LATEX: :options [label=\alph*)]
# - allow org to recognize alphabetical lists a)...: M-x customize-variable org-list-allow-alphabetical


# -----------------------
# General Export Options:
#+OPTIONS: ^:nil ':nil *:t -:t ::t <:t H:3 \n:nil arch:headline 
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: f:t inline:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t todo:t |:t

#+OPTIONS: author:Johannes Wasmer
#+OPTIONS: email:johannes.wasmer@gmail.com

#+OPTIONS: num:t
# t or nil: disable export latex section numbering for org headings
#+OPTIONS: toc:t
# t or nil: no table of contents (doesn't work if num:nil)

#+TITLE: Python_Snippets_Notes
#+DATE: <2020-11-21 Sat>
#+AUTHOR: Johannes Wasmer
# #+EMAIL: johannes.wasmer@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.13)

# ---------------------
# LaTeX Export Options:
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage[top=0.5in,bottom=0.5in,left=1in,right=1in,includeheadfoot]{geometry} % wider page; load BEFORE fancyhdr
#+LATEX_HEADER: \usepackage[inline]{enumitem} % for customization of itemize, enumerate envs
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE: 
#+LATEX_COMPILER: pdflatex
#+DATE: \today

* [[file:Python_Notes.org][master file]]
* <2019-11-06 Wed> using code not installed as module (add to sys.path)
** reference project setup
[[file:wasmerj/manual_imports_v1/][project folder]]

project setup:
#+begin_src bash :results output
tree ./wasmerj/manual_imports_v1
#+end_src

#+RESULTS:
#+begin_example
./wasmerj/manual_imports_v1
├── foo
│   ├── bar.py
│   └── __pycache__
│       └── bar.cpython-37.pyc
├── interpreter.ipynb
├── main.py
├── _MARKER_project_rootDir
├── u
│   └── v
│       └── script.py
└── x
    └── y

6 directories, 6 files
#+end_example

The branch ~x/y/~ is for simulating a location with same relative path ~../../~
to ~foo~ as ~u/v/~

content of ~foo/bar.py~:
#+begin_src bash :results output code
cat ./wasmerj/manual_imports_v1/foo/bar.py
#+end_src

#+RESULTS:
#+begin_src bash
class Foo:
    def bar(self):
        print("foobar")
#+end_src

content of ~main.py~:
#+begin_src bash :results output code
cat ./wasmerj/manual_imports_v1/main.py
#+end_src

#+RESULTS:
#+begin_src bash
from foo.bar import Foo

if __name__ == '__main__':
    foo = Foo()
    foo.bar()
#+end_src

content of ~u/v/script.py~: depends on the solution.

Important to note: calling ~main.py~ is callable from any location. The
solutions differ in the following: ~script.py~ is ...
- ... not callable (error = foo.bar not found = default)
- ... callable only from its location. calling it from another folder results in error.
- ... callable from any location.
** test results
*result summary:* use [[*solution combined file dunder & upwards search][solution combined file dunder & upwards search]]. This
solution only does NOT work if called not from a script (eg interpreter) AND
called from outside root dir. Then just install project as package and don't
need to worry about this.

| solution ... callable from:                    | pycharm | ~~/p/u/v/~ | ~~/p/x/y/~ | ~~/p/~ | ~~/~  | interpreter |
|------------------------------------------------+---------+------------+------------+--------+-------+-------------|
| none (just ~import foo.bar~)                   | yes     | ME         | ME         | ME     | ME    | ME 2)       |
| [[*solution append ~'../..'~][solution append ~'../..'~]] var1                 | yes     | yes        | yes        | ME     | ME    | ME 2)       |
| [[*solution append ~'../..'~][solution append ~'../..'~]] var2                 | yes     | yes        | yes        | ME     | ME    | ME 2)       |
| [[*solution append ~'../..'~][solution append ~'../..'~]] var3                 | yes     | yes        | yes        | ME     | ME    | ME 2)       |
| [[*solution ~importlib~][solution ~importlib~]]                           | yes     | yes        | yes        | FE     | FE    | FE 2)       |
|------------------------------------------------+---------+------------+------------+--------+-------+-------------|
| [[*solution file dunder > os.path > append][solution file dunder > os.path > append]]        | yes     | yes        | yes        | yes    | yes   | NE 1)       |
| [[*solution file dunder > pathlib > append][solution file dunder > pathlib > append]]        | yes     | yes        | yes        | yes    | yes   | NE 1)       |
| [[*solution upward root dir search][solution upward root dir search]]                | yes     | yes        | yes        | yes    | IE 1) | yes 1)      |
| [[*solution combined file dunder & upwards search][solution combined file dunder & upwards search]] | yes     | yes        | yes        | yes    | yes   | yes         |
| [[*solution %5B%5Bhttps://github.com/alecthomas/importmagic%5D%5Bimportmagic%5D%5D][solution importmagic]]                           |         |            |            |        |       |             |
|------------------------------------------------+---------+------------+------------+--------+-------+-------------|
Legend:
- ~~/p/u/v/~ = location of ~script.py~.
- ~~/p/x/y/~ = another location with same relpath to module ~foo/bar.py~.
- ~~/p/~ = ~somewhere/project/~, location of module ~foo/bar.py~.
- ~~/~ = anywhere else.
- interpreter: like eg python interpreter, ipython, jupyter notebook etc.
- ME = ~ModuleNotFoundError~.
- FE = ~FileNotFoundError~: =No such file or directory: '../../foo/bar.py'=.
- IE = ~ImportError~: =Could not find project level top dir marker file '_MARKER_projectRoot'.=
- NE = ~NameError~: =name '__file__' is not defined=.
- 1): [[*solution file dunder > pathlib > append][solution file dunder > pathlib > append]] works when ~__file__~ dunder is
  available (ie when running a script; then you can call from anywhere), 
  or [[*solution upward root dir
   search][solution upward root dir search]] works when it is not (ie running in
  interpreter/notebook), but then can only call from within project root. Note:
  the os.path append version is equivalent solution for Python3.5-.
- 2): not tested but by implication. just use combined solution.

** solutions
*** solution append ~'../..'~
content of ~u/v/script.py~:
    #+begin_src python
    # # var1, var2: for python2, var3: python3.6+
    import sys
    # variation1:
    sys.path.append('../..')
    # # variation2:
    # import os
    # sys.path.append(os.path.abspath('../..'))
    # # variation3:
    # from pathlib import Path
    # sys.path.append(Path('../..').resolve())
     
    from foo.bar import Foo
     
    if __name__ == '__main__':
        foo = Foo()
        foo.bar()
    #+end_src
*** solution ~importlib~
reference: [[https://stackoverflow.com/a/67692/8116031][SO best answer to 'How to import a module given the full path?']]

content of ~u/v/script.py~:
#+begin_src python
  # for python 3.5+:
  import importlib.util


  spec = importlib.util.spec_from_file_location("bar", "../../foo/bar.py")
  bar = importlib.util.module_from_spec(spec)
  spec.loader.exec_module(bar)

  if __name__ == '__main__':
    
      foo = bar.Foo()
      foo.bar()
#+end_src

*** solution file dunder > os.path > append

content of ~u/v/script.py~:
#+begin_src python
# for python2+
import sys
import os

dir_current = os.getcwd()
dir_file = os.path.dirname(os.path.realpath(__file__))
os.chdir(dir_file)
os.chdir('..')
dir_project = os.getcwd()
os.chdir(dir_current)
if dir_project not in sys.path:
    sys.path.append(dir_project)
from foo.bar import Foo

if __name__ == '__main__':
    foo = Foo()
    foo.bar()
#+end_src
*** solution file dunder > pathlib > append

 content of ~u/v/script.py~:
 #+begin_src python
# for python3.6+
import sys
from pathlib import Path

def import_project_modules_for_script():
    """reusable: add  project dir to sys.path when run from script.

     In order to use the project folder as a module when it is not
     installed as such, need to put it on the sys.path manually
     before doing anything else.

     Use this version if you call from an script. This version accepts calls
     from any location, not just from the project folder. If you're calling from
     an interpreter, use the version import_project_modules_for_interpreter instead.

     This method relies on the presence of the __file__ dunder.

    :return: project dir
    :rtype: Path
    """
    dir_called = Path.cwd()
    dir_script = Path(__file__).resolve().parent
    dir_project = dir_script.parent.parent
    if str(dir_project) not in sys.path:
            sys.path.append(str(dir_project))
    return dir_project

import_project_modules_for_script()
from foo.bar import Foo

if __name__ == '__main__':
    foo = Foo()
    foo.bar()
 #+end_src
*** solution upward root dir search
content of ~u/v/script.py~:
#+begin_src python
# for python3.6+
import sys
from pathlib import Path

def import_project_modules_for_interpreter():
    """reusable: add  project dir to sys.path when run from interpreter.

     In order to use the project folder as a module when it is not
     installed as such, need to put it on the sys.path manually
     before doing anything else.

     Use this version if you call from an interpreter, eg a Jupyter
     notebook. CAUTION: This version assumes that the caller was
     executed from inside the project folder! If you're calling from
     a script, use the version import_project_modules_for_script instead.

     This version searches dirs upward until project dir found by looking
     for a file named like '_MARKER_project_rootDir'.

    :return: project dir
    :rtype: Path
    """
    dir_root = Path('/')
    dir_project = None
    dir_called = Path.cwd()
    dir_current = dir_called
    FILE_TOPLEVEL_DIR_MARKER = "_MARKER_project_rootDir"

    while dir_current != dir_root:
        marker_file = dir_current / FILE_TOPLEVEL_DIR_MARKER
        if marker_file.is_file():
            FILE_TOPLEVEL_DIR_MARKER = marker_file
            dir_project = dir_current
            break
        dir_current = dir_current.parent
    if dir_project is None:
        raise ImportError("Could not find project level top dir marker file "
                          f"'{FILE_TOPLEVEL_DIR_MARKER}'. Make sure you called "
                          "from inside the project dir and that the marker file "
                          "is present.")
    if str(dir_project) not in sys.path:
        sys.path.append(str(dir_project))
        # now can load stuff from project DFT_Tutorial.modules
    return dir_project

import_project_modules_for_interpreter()
from foo.bar import Foo

if __name__ == '__main__':
    foo = Foo()
    foo.bar()
#+end_src

*** solution combined file dunder & upwards search
content of ~u/v/script.py~:
#+begin_src python
# for python3.6+
import sys
from pathlib import Path
import logging

logging.basicConfig(level=logging.DEBUG)  # DEBUG > INFO > WARN > ERROR

THIS_FILE_RELATIVE_PROJECT_PATH = "u/v/script.py"


def import_project_modules():
    """add project modules to sys.path manually to enable import for scripts/interpreters

    Requires EITHER global variable THIS_FILE_RELATIVE_PROJECT_PATH = e.g. "a/b/file.py",
    OR a file named '_MARKER_project_rootDir' ('project' is a wildcard) in order to work.

    In order to use modules from the project folder when it/they is not
    installed as package/modules, need to put it on the sys.path manually
    before being able to import them.

    This function first tries to get this file's location using __file__ dunder, then
    going upwards to the project dir and adding that to sys.path. If __file__ dunder is
    not available, eg cause called from interpreter, then tries to search upwards for a
    marker file denoting the project root, and adding that dir to sys.path.

    :return: project dir
    :rtype: Path
    """
    logger = logging.getLogger(__name__)

    try:
        dir_script = Path(__file__).resolve().parent
        depth = max(THIS_FILE_RELATIVE_PROJECT_PATH.count("/"),
                    THIS_FILE_RELATIVE_PROJECT_PATH.count("\\"))
        dir_project = dir_script
        while depth > 0:
            dir_project = dir_project.parent
            depth -= 1
        if str(dir_project) not in sys.path:
            logger.debug(f"used script version")
            sys.path.append(str(dir_project))
        return dir_project
    except (SystemExit, KeyboardInterrupt):
        raise
    except NameError as name_error:
        # NameError: name '__file__' is not defined
        # means: called from interpreter or similar
        logger.debug(f"implies called from interpreter not from script."
                     f"try upward search for project _MARKER file.", exc_info=name_error)

        dir_project = None
        dir_called = Path.cwd()
        dir_current = dir_called.resolve()
        dir_upper = dir_current.parent
        FILE_TOPLEVEL_DIR_MARKER = "_MARKER_project_rootDir"

        while dir_current != dir_upper:
            matches = list(dir_current.glob("_MARKER_*_rootDir"))
            match = matches[0] if (len(matches) > 0) else None
            if match:
                FILE_TOPLEVEL_DIR_MARKER = match
                dir_project = dir_current
                break
            dir_upper = dir_upper.parent
            dir_current = dir_current.parent
        if dir_project is None:
            raise ImportError("Could not find project level top dir marker file "
                              f"'{FILE_TOPLEVEL_DIR_MARKER}'. Make sure you called "
                              "from inside the project dir and that the marker file "
                              "is present.")
        if str(dir_project) not in sys.path:
            sys.path.append(str(dir_project))
            # now can load stuff from project DFT_Tutorial.modules
        return dir_project

    else:
        pass
    finally:
        pass


import_project_modules()
from foo.bar import Foo

if __name__ == '__main__':
    foo = Foo()
    foo.bar()
#+end_src
*** TODO solution [[https://github.com/alecthomas/importmagic][importmagic]]
found via: is used by emacs orgmode babel src block python. 
* <2019-11-06 Wed> ~pathlib~ snippets, successor to ~os.path~ as of py3.6 
#+begin_src python
  from pathlib import Path
  import os

  # cwd
  path = Path.cwd()

  # go down dir using / operator
  path = path / 'bla'

  # go up dir
  path = path.parent

  # change dir: os.chdir accepts Path objects as of 3.6
  os.chdir(path)
#+end_src
* <2019-01-21 Mon> multiple inheritance, abc AbstractBaseClass
** attribute init order
#+BEGIN_SRC python :results output
from abc import ABC, abstractmethod
from enum import Enum
class T(Enum):
    B = 1
    C = 2
class A(ABC):
    def __init__(self):
        if not hasattr(self, 'a'):
            self.a = set()
        print(f"init A.a: {self.a}")
    def f(self):
        check = ['d','dd']
        print(f"f: 'd','dd' in a: {any(c in self.a for c in check)}\n")
        print(self.a)
class B(A):
    def __init__(self):
        A.__init__(self)
        self.a.update('b')
        print(f"init B.a: {self.a}")
class D(A):
    def __init__(self):
        A.__init__(self)
        self.a.update('d')
        print(f"init D.a: {self.a}")
class BD(B,D):
    def __init__(self):
        D.__init__(self)
        B.__init__(self)
        print(f"init BD.a: {self.a}")
        

        
b = B()
b.f()

d = D()
d.f()

bd = BD()
bd.f()

print(bd.a)
#+END_SRC

#+RESULTS:
#+begin_example
init A.a: set()
init B.a: {'b'}
f: 'd','dd' in a: False

{'b'}
init A.a: set()
init D.a: {'d'}
f: 'd','dd' in a: True

{'d'}
init A.a: set()
init D.a: {'d'}
init A.a: {'d'}
init B.a: {'d', 'b'}
init BD.a: {'d', 'b'}
f: 'd','dd' in a: True

{'d', 'b'}
{'d', 'b'}
#+end_example
** multiple inheritance: method inheritance order
A derived class uses the matching overwritten method of the first derived class.
#+BEGIN_SRC python :results output
from abc import ABC, abstractmethod

class A(ABC):
    @abstractmethod
    def f(self):
        print("A")
class B(A):
    def f(self):
        print("B")
class C(A):
    def f(self):
        print("C")
class D(B,C):
    pass
class E(C,B):
    pass

d = D()
d.f()
e = E()
e.f()
#+END_SRC

#+RESULTS:
: B
: C
